local unistring = require "unistring"
describe("width", function()
	it("works", function()
		assert.same(3, unistring.width("foo", ""))
	end)
end)
describe("normalize", function()
	it("works", function()
		assert.same("foo", unistring.normalize("NFC", "foo"))
	end)
end)
describe("normxfrm", function()
	it("works", function()
		assert.same("foo" < "foo", unistring.normxfrm("foo", "NFC") < unistring.normxfrm("foo", "NFC"))
	end)
end)
describe("locale_language", function()
	it("works", function()
		local old_locale = os.setlocale()
		os.setlocale("C")
		assert.same("", unistring.locale_language())
		if os.setlocale("en_US") then
			assert.same("en", unistring.locale_language())
		end
		os.setlocale(old_locale)
	end)
end)
describe("toupper", function()
	it("works", function()
		assert.same("FOO", unistring.toupper("foo", nil, "NFC"))
		assert.same("FOO", unistring.toupper("FOO", nil, "NFC"))
	end)
end)
describe("tolower", function()
	it("works", function()
		assert.same("foo", unistring.tolower("foo", nil, "NFC"))
		assert.same("foo", unistring.tolower("FOO", nil, "NFC"))
	end)
end)
describe("totitle", function()
	it("works", function()
		assert.same("Foo", unistring.totitle("foo", nil, "NFC"))
		assert.same("Foo", unistring.totitle("FOO", nil, "NFC"))
	end)
end)
describe("casefold", function()
	it("works", function()
		assert.same("foo", unistring.casefold("foo", nil, "NFC"))
		assert.same("foo", unistring.casefold("Foo", nil, "NFC"))
		assert.same("strasse", unistring.casefold("Straße", nil, "NFC"))
		-- Some russian chars (randomly grabbed from https://stackoverflow.com/questions/5777902/converting-russian-characters-from-upper-case-to-lower-case-in-php)
		assert.same("ёйцукенгшщзхъфывапролджэячсмитьбю", unistring.casefold("ЁЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ", nil, "NFC"))
		-- Longest decomposition
		assert.same("صلى الله عليه وسلم", unistring.casefold("ﷺ", nil, "NFKD"))
		-- null byte
		assert.same("\0", unistring.casefold("\0", nil, "NFC"))
	end)
	it("handles corrupt unicode", function()
		-- invalid char
		assert.same("�", unistring.casefold("\254", nil, "NFC"))
		-- overlong
		assert.same("��", unistring.casefold("\192\128", nil, "NFC"))
		-- invalid code point
		assert.same(nil, (unistring.casefold("\237\160\128", nil, "NFC")))
	end)
end)
describe("casexfrm", function()
	it("works", function()
		assert.same("foo" < "foo", unistring.casexfrm("foo") < unistring.casexfrm("foo"))
	end)
end)
describe("casecoll", function()
	it("works", function()
		assert.same(-1, unistring.casecoll("bar", "foo"))
		assert.same(0, unistring.casecoll("foo", "foo"))
		assert.same(1, unistring.casecoll("foo", "bar"))
	end)
end)
describe("is_uppercase", function()
	it("works", function()
		assert.same(false, unistring.is_uppercase("foo"))
		assert.same(true, unistring.is_uppercase("FOO"))
	end)
end)
describe("is_lowercase", function()
	it("works", function()
		assert.same(true, unistring.is_lowercase("foo"))
		assert.same(false, unistring.is_lowercase("FOO"))
	end)
end)
describe("is_titlecase", function()
	it("works", function()
		assert.same(false, unistring.is_titlecase("foo"))
		assert.same(false, unistring.is_titlecase("FOO"))
		assert.same(true, unistring.is_titlecase("Foo"))
	end)
end)
describe("is_casefolded", function()
	it("works", function()
		assert.same(true, unistring.is_casefolded("foo"))
		assert.same(false, unistring.is_casefolded("FOO"))
	end)
end)
describe("is_cased", function()
	it("works", function()
		assert.same(true, unistring.is_cased("foo"))
		assert.same(false, unistring.is_cased("-"))
	end)
end)
